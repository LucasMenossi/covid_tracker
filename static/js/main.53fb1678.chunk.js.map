{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","components/DailyCharts/DailyCharts.jsx","App.js","index.js","components/Charts/Charts.module.css","App.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","active","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","daily","deltaConfirmed","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","moment","format","datasets","label","borderColor","fill","backgroundColor","options","responsive","title","display","text","tooltips","mode","intersect","hover","scales","yAxes","ticks","callback","index","values","toLocaleString","barChart","legend","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","DailyCharts","App","state","fetchedData","setState","this","image","src","coronaImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53fb1678.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1fcNF\",\"card\":\"Cards_card__73jeC\",\"infected\":\"Cards_infected__1Zt1k\",\"recovered\":\"Cards_recovered__1gu8J\",\"deaths\":\"Cards_deaths__4WzmQ\",\"active\":\"Cards_active__2t4u2\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx  from 'classnames';\r\n\r\nconst Cards = ({ data : { confirmed, recovered, deaths, lastUpdate }}) => {\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.active)}>\r\n                    <CardContent>\r\n                        <Typography color={\"textSecondary\"} gutterBottom>Active</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value - recovered.value - deaths.value} duration={2.5} separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate }} = await axios.get(changeableUrl);\r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        }\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ( {\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n            daily: dailyData.deltaConfirmed,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data: { countries }} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nimport styles from './Charts.module.css'\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        console.log(dailyData.map(({ deaths }) => deaths)),\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => moment(date, \"YYYY-MM-DD\").format(\"DD-MM\")),\r\n                        datasets: [{\r\n                            data: dailyData.map(({ confirmed }) => confirmed),\r\n                            label: 'Infected',\r\n                            borderColor: '#3333ff',\r\n                            fill: true,\r\n                        }, {\r\n                            data: dailyData.map(({ deaths }) => deaths),\r\n                            label: 'Deaths',\r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true,\r\n                        }],\r\n                    }}\r\n                    options={{\r\n                        responsive: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Progression of COVID-19'\r\n                        },\r\n                        tooltips: {\r\n                            mode: 'index',\r\n                            intersect: false,\r\n                        },\r\n                        hover: {\r\n                            mode: 'nearest',\r\n                            intersect: true\r\n                        },\r\n                        scales : {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    callback: function(value, index, values) {\r\n                                        return value.toLocaleString()\r\n                                    }\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n                ) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: [\r\n                                'rgba(0, 0, 255, 0.5)',\r\n                                'rgba(0, 255, 0, 0.5)',\r\n                                'rgba(255, 0, 0, 0.5)',\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}` }\r\n                    }}\r\n                />\r\n            ) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => (handleCountryChange(e.target.value))}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line} from 'react-chartjs-2';\r\nimport moment from 'moment'\r\n\r\nimport styles from '../Charts/Charts.module.css'\r\n\r\nconst DailyCharts = ({ data: { daily }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => moment(date, \"YYYY-MM-DD\").format(\"DD-MM\")),\r\n                        datasets: [{\r\n                            data: dailyData.map(({ daily }) => daily),\r\n                            label: 'Infected',\r\n                            borderColor: '#3333ff',\r\n                            fill: true,\r\n                        }],\r\n                    }}\r\n                    options={{\r\n                        responsive: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Number of cases per day'\r\n                        },\r\n                        tooltips: {\r\n                            mode: 'index',\r\n                            intersect: false,\r\n                        },\r\n                        hover: {\r\n                            mode: 'nearest',\r\n                            intersect: true\r\n                        },\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        scales : {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    callback: function(value, index, values) {\r\n                                        return value.toLocaleString()\r\n                                    }\r\n                                }\r\n                            }]\r\n                        },\r\n                    }}\r\n                />\r\n                ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? null : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyCharts;","import React from 'react';\r\n\r\nimport { Cards, Charts, CountryPicker, DailyCharts } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: [],\r\n        country: \"\",\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state\r\n\r\n        return (\r\n            <div className={styles.image} className={styles.container} alt=\"COVID-19\">\r\n                <img src={coronaImage} className={styles.image}/>\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Charts data={data} country={country}/>\r\n                <DailyCharts data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2-M6v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Ca4TG\",\"image\":\"App_image__3SShx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__Mj7Uz\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}